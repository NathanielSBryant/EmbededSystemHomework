
bin/Debug/homework_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000584  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  0000055c  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000084  0080012a  0080012a  00000642  2**0
                  ALLOC
  4 .stab         00000c6c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001351  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000031ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_18>
  4c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3a       	cpi	r26, 0xAE	; 174
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  9e:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay>:
 * future hardware changes.  Ideally a timer should be
 * used instead of a set of for loops.  Timers will be
 * taught later in the semester.
 */
void delay(unsigned int msec)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <delay+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <delay+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <delay+0xa>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	9e 83       	std	Y+6, r25	; 0x06
  b6:	8d 83       	std	Y+5, r24	; 0x05
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	19 82       	std	Y+1, r1	; 0x01
  bc:	12 c0       	rjmp	.+36     	; 0xe2 <delay+0x3c>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
  be:	1c 82       	std	Y+4, r1	; 0x04
  c0:	1b 82       	std	Y+3, r1	; 0x03
  c2:	05 c0       	rjmp	.+10     	; 0xce <delay+0x28>
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	9c 81       	ldd	r25, Y+4	; 0x04
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	9c 83       	std	Y+4, r25	; 0x04
  cc:	8b 83       	std	Y+3, r24	; 0x03
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	88 3e       	cpi	r24, 0xE8	; 232
  d4:	93 40       	sbci	r25, 0x03	; 3
  d6:	b0 f3       	brcs	.-20     	; 0xc4 <delay+0x1e>
void delay(unsigned int msec)
{
    volatile unsigned i,j ;  /* volatile prevents loops from being optimized away */

    /* outer loop, loops for specified number of milliseconds */
    for (i=0; i<msec; i++) {
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	3a 81       	ldd	r19, Y+2	; 0x02
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	28 17       	cp	r18, r24
  ec:	39 07       	cpc	r19, r25
  ee:	38 f3       	brcs	.-50     	; 0xbe <delay+0x18>
        /* inner loop, loops for 1 millisecond delay */
        for (j=0;j<LOOPS_PER_MSEC;j++) {}
    }
}
  f0:	00 00       	nop
  f2:	26 96       	adiw	r28, 0x06	; 6
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <writestr>:
 * NOTE: uart_init() should be called this function
 *   is invoked for the first time or unpredictable
 *   UART behavior may result.
 */
void writestr(char * str)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <writestr+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <writestr+0x8>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 114:	1a 82       	std	Y+2, r1	; 0x02
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	0f c0       	rjmp	.+30     	; 0x138 <writestr+0x34>
        /* output the character to the UART */
        uart_writechar(str[i]);
 11a:	2b 81       	ldd	r18, Y+3	; 0x03
 11c:	3c 81       	ldd	r19, Y+4	; 0x04
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	0e 94 b8 01 	call	0x370	; 0x370 <uart_writechar>
void writestr(char * str)
{
    unsigned int i;

    /* loop for each character in the string */
    for (i=0; str[i]!=0;i++) {
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	2b 81       	ldd	r18, Y+3	; 0x03
 13a:	3c 81       	ldd	r19, Y+4	; 0x04
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	39 f7       	brne	.-50     	; 0x11a <writestr+0x16>
        /* output the character to the UART */
        uart_writechar(str[i]);
    }
}
 14c:	00 00       	nop
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <numtoHexAscii>:
*
*
**********************************/

int numtoHexAscii (int numValue)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <numtoHexAscii+0x6>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
    //Checks if the value needs to be a letter or not

    if(numValue < 9)//If below 9 the ASCII of 0-9 is 48-58
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
 16e:	09 97       	sbiw	r24, 0x09	; 9
 170:	34 f4       	brge	.+12     	; 0x17e <numtoHexAscii+0x22>
    {
        numValue += 48;
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	c0 96       	adiw	r24, 0x30	; 48
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	05 c0       	rjmp	.+10     	; 0x188 <numtoHexAscii+0x2c>
    }
    else //If value is above 9 the ASCII of A-F is 65-70
    {
        numValue += 55;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	c7 96       	adiw	r24, 0x37	; 55
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
    }

    return numValue;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02

}
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <writehex8>:
*
*
*
**********************************/
void writehex8(unsigned char num)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <writehex8+0x6>
 19c:	1f 92       	push	r1
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	8b 83       	std	Y+3, r24	; 0x03
    /* student-provided implementatino code goes here*/
    int andMask = 15;//and mask of 0x1111
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	89 83       	std	Y+1, r24	; 0x01
    uart_writechar(numtoHexAscii((andMask&(num>>4))));
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	82 95       	swap	r24
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ba:	82 23       	and	r24, r18
 1bc:	93 23       	and	r25, r19
 1be:	0e 94 ae 00 	call	0x15c	; 0x15c <numtoHexAscii>
 1c2:	0e 94 b8 01 	call	0x370	; 0x370 <uart_writechar>

    uart_writechar(numtoHexAscii((andMask & num)));
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	82 23       	and	r24, r18
 1d2:	93 23       	and	r25, r19
 1d4:	0e 94 ae 00 	call	0x15c	; 0x15c <numtoHexAscii>
 1d8:	0e 94 b8 01 	call	0x370	; 0x370 <uart_writechar>


}
 1dc:	00 00       	nop
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <writehex16>:
*
*
*
**********************************/
void writehex16(unsigned int num)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	28 97       	sbiw	r28, 0x08	; 8
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	98 87       	std	Y+8, r25	; 0x08
 200:	8f 83       	std	Y+7, r24	; 0x07
    /* student-provided implementatino code goes here */
    int andMask = 255; //And mask of 0x11111111
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
    unsigned int value2 = (num & andMask);
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	2f 81       	ldd	r18, Y+7	; 0x07
 210:	38 85       	ldd	r19, Y+8	; 0x08
 212:	82 23       	and	r24, r18
 214:	93 23       	and	r25, r19
 216:	9c 83       	std	Y+4, r25	; 0x04
 218:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int value1 = ((num>>8) & andMask);
 21a:	8f 81       	ldd	r24, Y+7	; 0x07
 21c:	98 85       	ldd	r25, Y+8	; 0x08
 21e:	29 2f       	mov	r18, r25
 220:	33 27       	eor	r19, r19
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	82 23       	and	r24, r18
 228:	93 23       	and	r25, r19
 22a:	9e 83       	std	Y+6, r25	; 0x06
 22c:	8d 83       	std	Y+5, r24	; 0x05
    writehex8(value1);
 22e:	8d 81       	ldd	r24, Y+5	; 0x05
 230:	0e 94 cb 00 	call	0x196	; 0x196 <writehex8>
    writehex8(value2);
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	0e 94 cb 00 	call	0x196	; 0x196 <writehex8>

}
 23a:	00 00       	nop
 23c:	28 96       	adiw	r28, 0x08	; 8
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <blink_led>:
*
*
*
**********************************/
void blink_led(char *msg)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <blink_led+0x6>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01
    /* student-provided implementatino code goes here */
    //Runs untill it finds the null termnation
    while(*(msg) != 0x00)
 25c:	51 c0       	rjmp	.+162    	; 0x300 <blink_led+0xb2>
    {

        //Waits 250 MS
        if(*(msg) == '.')
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	8e 32       	cpi	r24, 0x2E	; 46
 268:	d9 f4       	brne	.+54     	; 0x2a0 <blink_led+0x52>
        {
            PORTB |= (1<<1); //Turns on the LED
 26a:	85 e2       	ldi	r24, 0x25	; 37
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	25 e2       	ldi	r18, 0x25	; 37
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	22 60       	ori	r18, 0x02	; 2
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
            delay(250);
 27c:	8a ef       	ldi	r24, 0xFA	; 250
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
            PORTB &= ~(1<<1); //Turns off the LED
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	25 e2       	ldi	r18, 0x25	; 37
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	2d 7f       	andi	r18, 0xFD	; 253
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
            delay(100);
 296:	84 e6       	ldi	r24, 0x64	; 100
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
 29e:	2b c0       	rjmp	.+86     	; 0x2f6 <blink_led+0xa8>
        }
        //Waits 750 ms
        else if(*(msg) == '-')
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	8d 32       	cpi	r24, 0x2D	; 45
 2aa:	d9 f4       	brne	.+54     	; 0x2e2 <blink_led+0x94>
        {
            PORTB |=(1<<1);//Turns on the LED
 2ac:	85 e2       	ldi	r24, 0x25	; 37
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	25 e2       	ldi	r18, 0x25	; 37
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	22 60       	ori	r18, 0x02	; 2
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
            delay(750);
 2be:	8e ee       	ldi	r24, 0xEE	; 238
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
            PORTB &= ~(1<<1); //Turns off the LED
 2c6:	85 e2       	ldi	r24, 0x25	; 37
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	25 e2       	ldi	r18, 0x25	; 37
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	2d 7f       	andi	r18, 0xFD	; 253
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
            delay(100);
 2d8:	84 e6       	ldi	r24, 0x64	; 100
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
 2e0:	0a c0       	rjmp	.+20     	; 0x2f6 <blink_led+0xa8>
        }
        //Waits 1000 ms
        else if(*(msg) == ' ')
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	fc 01       	movw	r30, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	80 32       	cpi	r24, 0x20	; 32
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <blink_led+0xa8>
        {
             delay(1000);
 2ee:	88 ee       	ldi	r24, 0xE8	; 232
 2f0:	93 e0       	ldi	r25, 0x03	; 3
 2f2:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
        }

        msg++;
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	9a 83       	std	Y+2, r25	; 0x02
 2fe:	89 83       	std	Y+1, r24	; 0x01
**********************************/
void blink_led(char *msg)
{
    /* student-provided implementatino code goes here */
    //Runs untill it finds the null termnation
    while(*(msg) != 0x00)
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	9a 81       	ldd	r25, Y+2	; 0x02
 304:	fc 01       	movw	r30, r24
 306:	80 81       	ld	r24, Z
 308:	88 23       	and	r24, r24
 30a:	09 f0       	breq	.+2      	; 0x30e <blink_led+0xc0>
 30c:	a8 cf       	rjmp	.-176    	; 0x25e <blink_led+0x10>
        }

        msg++;

    }
}
 30e:	00 00       	nop
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <main>:
#include <avr/io.h>
#include "output.c"
#include "hw4lib.h"

int main(void)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
    // Insert code
    uart_init();
 322:	0e 94 b4 01 	call	0x368	; 0x368 <uart_init>
    DDRB |= (1<<1);
 326:	84 e2       	ldi	r24, 0x24	; 36
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	24 e2       	ldi	r18, 0x24	; 36
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	22 60       	ori	r18, 0x02	; 2
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
    writestr("SER-486 HW3 Nathaniel Bryant\n\r");
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 82 00 	call	0x104	; 0x104 <writestr>
    writehex8(0x0A);
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	0e 94 cb 00 	call	0x196	; 0x196 <writehex8>
    writestr("\n\r");//Creates a new line and a carriage return
 346:	8f e1       	ldi	r24, 0x1F	; 31
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 82 00 	call	0x104	; 0x104 <writestr>
    writehex16(0xC0DE);
 34e:	8e ed       	ldi	r24, 0xDE	; 222
 350:	90 ec       	ldi	r25, 0xC0	; 192
 352:	0e 94 f5 00 	call	0x1ea	; 0x1ea <writehex16>
    writestr("\n\r");//Creates a new line and a carriage return
 356:	8f e1       	ldi	r24, 0x1F	; 31
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 82 00 	call	0x104	; 0x104 <writestr>


    while(1)
    {
        blink_led("--- -.-");
 35e:	82 e2       	ldi	r24, 0x22	; 34
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 27 01 	call	0x24e	; 0x24e <blink_led>
        }
 366:	fb cf       	rjmp	.-10     	; 0x35e <main+0x44>

00000368 <uart_init>:
 368:	0e 94 ba 01 	call	0x374	; 0x374 <serial_init>
 36c:	78 94       	sei
 36e:	08 95       	ret

00000370 <uart_writechar>:
 370:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <serial_writechar>

00000374 <serial_init>:
 374:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 378:	87 e6       	ldi	r24, 0x67	; 103
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 380:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 384:	e1 ec       	ldi	r30, 0xC1	; 193
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	80 83       	st	Z, r24
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 392:	80 81       	ld	r24, Z
 394:	80 6a       	ori	r24, 0xA0	; 160
 396:	80 83       	st	Z, r24
 398:	08 95       	ret

0000039a <__vector_18>:
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
 3ae:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rxtail>
 3b2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <rxhead>
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	82 1b       	sub	r24, r18
 3ba:	91 09       	sbc	r25, r1
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	8f 73       	andi	r24, 0x3F	; 63
 3c0:	99 27       	eor	r25, r25
 3c2:	89 2b       	or	r24, r25
 3c4:	79 f0       	breq	.+30     	; 0x3e4 <__vector_18+0x4a>
 3c6:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <rxhead>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3d0:	e2 5d       	subi	r30, 0xD2	; 210
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 83       	st	Z, r24
 3d6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	8f 73       	andi	r24, 0x3F	; 63
 3de:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rxhead>
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <__vector_18+0x4e>
 3e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_19>:
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 414:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	82 1b       	sub	r24, r18
 41c:	91 09       	sbc	r25, r1
 41e:	8f 73       	andi	r24, 0x3F	; 63
 420:	99 27       	eor	r25, r25
 422:	89 2b       	or	r24, r25
 424:	79 f0       	breq	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e2 59       	subi	r30, 0x92	; 146
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	80 81       	ld	r24, Z
 432:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 436:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	8f 73       	andi	r24, 0x3F	; 63
 43e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 444:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 448:	8f 7d       	andi	r24, 0xDF	; 223
 44a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <serial_rxchars>:
 462:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 466:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 46a:	89 1b       	sub	r24, r25
 46c:	8f 73       	andi	r24, 0x3F	; 63
 46e:	08 95       	ret

00000470 <serial_popchar>:
 470:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <rxhead>
 474:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <rxtail>
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	82 1b       	sub	r24, r18
 47c:	91 09       	sbc	r25, r1
 47e:	8f 73       	andi	r24, 0x3F	; 63
 480:	99 27       	eor	r25, r25
 482:	89 2b       	or	r24, r25
 484:	69 f0       	breq	.+26     	; 0x4a0 <serial_popchar+0x30>
 486:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <rxtail>
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	e2 5d       	subi	r30, 0xD2	; 210
 48e:	fe 4f       	sbci	r31, 0xFE	; 254
 490:	80 81       	ld	r24, Z
 492:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rxtail>
 496:	9f 5f       	subi	r25, 0xFF	; 255
 498:	9f 73       	andi	r25, 0x3F	; 63
 49a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <rxtail>
 49e:	08 95       	ret
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <serial_writechar>:
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	07 fe       	sbrs	r0, 7
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <serial_writechar+0x22>
 4aa:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 4ae:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	29 1b       	sub	r18, r25
 4b6:	31 09       	sbc	r19, r1
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	31 09       	sbc	r19, r1
 4bc:	2f 73       	andi	r18, 0x3F	; 63
 4be:	33 27       	eor	r19, r19
 4c0:	23 2b       	or	r18, r19
 4c2:	99 f3       	breq	.-26     	; 0x4aa <serial_writechar+0x6>
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <serial_writechar+0x3c>
 4c6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
 4ca:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <txhead>
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	29 1b       	sub	r18, r25
 4d2:	31 09       	sbc	r19, r1
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	31 09       	sbc	r19, r1
 4d8:	2f 73       	andi	r18, 0x3F	; 63
 4da:	33 27       	eor	r19, r19
 4dc:	23 2b       	or	r18, r19
 4de:	61 f0       	breq	.+24     	; 0x4f8 <serial_writechar+0x54>
 4e0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <txhead>
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	e2 59       	subi	r30, 0x92	; 146
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	80 83       	st	Z, r24
 4ec:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <txhead>
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	8f 73       	andi	r24, 0x3F	; 63
 4f4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <txhead>
 4f8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 502:	08 95       	ret

00000504 <serial_writestr>:
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	11 e0       	ldi	r17, 0x01	; 1
 510:	18 0f       	add	r17, r24
 512:	fe 01       	movw	r30, r28
 514:	e8 0f       	add	r30, r24
 516:	f1 1d       	adc	r31, r1
 518:	80 81       	ld	r24, Z
 51a:	88 23       	and	r24, r24
 51c:	21 f0       	breq	.+8      	; 0x526 <serial_writestr+0x22>
 51e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <serial_writechar>
 522:	81 2f       	mov	r24, r17
 524:	f4 cf       	rjmp	.-24     	; 0x50e <serial_writestr+0xa>
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	08 95       	ret

0000052e <serial_writestr_P>:
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	11 e0       	ldi	r17, 0x01	; 1
 53a:	18 0f       	add	r17, r24
 53c:	fe 01       	movw	r30, r28
 53e:	e8 0f       	add	r30, r24
 540:	f1 1d       	adc	r31, r1
 542:	84 91       	lpm	r24, Z
 544:	88 23       	and	r24, r24
 546:	21 f0       	breq	.+8      	; 0x550 <serial_writestr_P+0x22>
 548:	0e 94 52 02 	call	0x4a4	; 0x4a4 <serial_writechar>
 54c:	81 2f       	mov	r24, r17
 54e:	f4 cf       	rjmp	.-24     	; 0x538 <serial_writestr_P+0xa>
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
