
bin/Debug/homework1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .siminfo      00000028  000003a2  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000084  008001ae  008001ae  0000050c  2**0
                  ALLOC
  4 .stab         0000099c  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000129a  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  8 .debug_info   000005f4  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005a2  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00002d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000208  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_18>
  4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3a       	cpi	r26, 0xAE	; 174
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae ea       	ldi	r26, 0xAE	; 174
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writestr>:
#include <avr/io.h>
#include "uart.h"

//Takes a string and prints it out to the uart 1 char at a time
void writestr(char * charArray)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <writestr+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <writestr+0x8>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	9c 83       	std	Y+4, r25	; 0x04
  b4:	8b 83       	std	Y+3, r24	; 0x03
    char * seeker;//Creates a seeker point to not destory the pointer of the string
    seeker = charArray;
  b6:	8b 81       	ldd	r24, Y+3	; 0x03
  b8:	9c 81       	ldd	r25, Y+4	; 0x04
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01

    //Loop will run until a null terminateor is found
    while(*(seeker) != '\0')
  be:	0b c0       	rjmp	.+22     	; 0xd6 <writestr+0x30>
    {

        uart_writechar(*(seeker));
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <uart_writechar>
        //Inmmcrements the next element
        seeker++;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01
{
    char * seeker;//Creates a seeker point to not destory the pointer of the string
    seeker = charArray;

    //Loop will run until a null terminateor is found
    while(*(seeker) != '\0')
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	79 f7       	brne	.-34     	; 0xc0 <writestr+0x1a>
        //Inmmcrements the next element
        seeker++;
    }


}
  e2:	00 00       	nop
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <printNumber>:

void printNumber(int numb) //Takes the number of bytes the size of a data type and returns it in bits
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <printNumber+0x6>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	89 83       	std	Y+1, r24	; 0x01


    switch (numb)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	91 05       	cpc	r25, r1
 108:	89 f0       	breq	.+34     	; 0x12c <printNumber+0x3a>
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	91 05       	cpc	r25, r1
 10e:	1c f4       	brge	.+6      	; 0x116 <printNumber+0x24>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	39 f0       	breq	.+14     	; 0x122 <printNumber+0x30>
        case 4: //Four Bytes
            writestr("32 bits\n");
        break;
    }

}
 114:	1a c0       	rjmp	.+52     	; 0x14a <printNumber+0x58>

void printNumber(int numb) //Takes the number of bytes the size of a data type and returns it in bits
{


    switch (numb)
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	91 05       	cpc	r25, r1
 11a:	69 f0       	breq	.+26     	; 0x136 <printNumber+0x44>
 11c:	04 97       	sbiw	r24, 0x04	; 4
 11e:	81 f0       	breq	.+32     	; 0x140 <printNumber+0x4e>
        case 4: //Four Bytes
            writestr("32 bits\n");
        break;
    }

}
 120:	14 c0       	rjmp	.+40     	; 0x14a <printNumber+0x58>

    switch (numb)
    {

        case 1: //One Byte
            writestr("8 bits\n");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
        break;
 12a:	0f c0       	rjmp	.+30     	; 0x14a <printNumber+0x58>

        case 2: //Two Bytes
            writestr("16 bits\n");
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
        break;
 134:	0a c0       	rjmp	.+20     	; 0x14a <printNumber+0x58>

        case 3: //Three Bytes
            writestr("24 bits\n");
 136:	81 e1       	ldi	r24, 0x11	; 17
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
        break;
 13e:	05 c0       	rjmp	.+10     	; 0x14a <printNumber+0x58>

        case 4: //Four Bytes
            writestr("32 bits\n");
 140:	8a e1       	ldi	r24, 0x1A	; 26
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
        break;
 148:	00 00       	nop
    }

}
 14a:	00 00       	nop
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <main>:


int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62

    uart_init();//Inits uart
 15e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <uart_init>
    writestr("Hello World from Atmega328\n");
 162:	83 e2       	ldi	r24, 0x23	; 35
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    writestr("SER486 -- Homework Assignment 1\n");
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    writestr("Nathaniel Bryant\n");
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    writestr("char size (bits) = ");
 17a:	82 e7       	ldi	r24, 0x72	; 114
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    printNumber(sizeof(char));
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 79 00 	call	0xf2	; 0xf2 <printNumber>
    writestr("int size (bits) = ");
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    printNumber(sizeof(int));
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 79 00 	call	0xf2	; 0xf2 <printNumber>
    writestr("long size (bits) = ");
 19a:	89 e9       	ldi	r24, 0x99	; 153
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <writestr>
    printNumber(sizeof(long));
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 79 00 	call	0xf2	; 0xf2 <printNumber>


    while(1) //needed by assignment
   {
    }
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0x54>

000001ac <uart_init>:
 1ac:	03 d0       	rcall	.+6      	; 0x1b4 <serial_init>
 1ae:	78 94       	sei
 1b0:	08 95       	ret

000001b2 <uart_writechar>:
 1b2:	98 c0       	rjmp	.+304    	; 0x2e4 <serial_writechar>

000001b4 <serial_init>:
 1b4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1b8:	83 e3       	ldi	r24, 0x33	; 51
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	88 e1       	ldi	r24, 0x18	; 24
 1ca:	80 83       	st	Z, r24
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1d2:	80 81       	ld	r24, Z
 1d4:	80 6a       	ori	r24, 0xA0	; 160
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <__vector_18>:
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rxtail>
 1f2:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <rxhead>
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	82 1b       	sub	r24, r18
 1fa:	91 09       	sbc	r25, r1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	8f 73       	andi	r24, 0x3F	; 63
 200:	99 27       	eor	r25, r25
 202:	89 2b       	or	r24, r25
 204:	79 f0       	breq	.+30     	; 0x224 <__vector_18+0x4a>
 206:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <rxhead>
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 210:	ee 54       	subi	r30, 0x4E	; 78
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	80 83       	st	Z, r24
 216:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <rxhead>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	8f 73       	andi	r24, 0x3F	; 63
 21e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <rxhead>
 222:	02 c0       	rjmp	.+4      	; 0x228 <__vector_18+0x4e>
 224:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_19>:
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <txhead>
 254:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end>
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	82 1b       	sub	r24, r18
 25c:	91 09       	sbc	r25, r1
 25e:	8f 73       	andi	r24, 0x3F	; 63
 260:	99 27       	eor	r25, r25
 262:	89 2b       	or	r24, r25
 264:	79 f0       	breq	.+30     	; 0x284 <__vector_19+0x48>
 266:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <__data_end>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ee 50       	subi	r30, 0x0E	; 14
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 81       	ld	r24, Z
 272:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 276:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	8f 73       	andi	r24, 0x3F	; 63
 27e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
 282:	05 c0       	rjmp	.+10     	; 0x28e <__vector_19+0x52>
 284:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 288:	8f 7d       	andi	r24, 0xDF	; 223
 28a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <serial_rxchars>:
 2a2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <rxhead>
 2a6:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <rxtail>
 2aa:	89 1b       	sub	r24, r25
 2ac:	8f 73       	andi	r24, 0x3F	; 63
 2ae:	08 95       	ret

000002b0 <serial_popchar>:
 2b0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <rxhead>
 2b4:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <rxtail>
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	82 1b       	sub	r24, r18
 2bc:	91 09       	sbc	r25, r1
 2be:	8f 73       	andi	r24, 0x3F	; 63
 2c0:	99 27       	eor	r25, r25
 2c2:	89 2b       	or	r24, r25
 2c4:	69 f0       	breq	.+26     	; 0x2e0 <serial_popchar+0x30>
 2c6:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <rxtail>
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ee 54       	subi	r30, 0x4E	; 78
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 81       	ld	r24, Z
 2d2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <rxtail>
 2d6:	9f 5f       	subi	r25, 0xFF	; 255
 2d8:	9f 73       	andi	r25, 0x3F	; 63
 2da:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <rxtail>
 2de:	08 95       	ret
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <serial_writechar>:
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	07 fe       	sbrs	r0, 7
 2e8:	0e c0       	rjmp	.+28     	; 0x306 <serial_writechar+0x22>
 2ea:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end>
 2ee:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <txhead>
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	29 1b       	sub	r18, r25
 2f6:	31 09       	sbc	r19, r1
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	31 09       	sbc	r19, r1
 2fc:	2f 73       	andi	r18, 0x3F	; 63
 2fe:	33 27       	eor	r19, r19
 300:	23 2b       	or	r18, r19
 302:	99 f3       	breq	.-26     	; 0x2ea <serial_writechar+0x6>
 304:	0d c0       	rjmp	.+26     	; 0x320 <serial_writechar+0x3c>
 306:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end>
 30a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <txhead>
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	29 1b       	sub	r18, r25
 312:	31 09       	sbc	r19, r1
 314:	21 50       	subi	r18, 0x01	; 1
 316:	31 09       	sbc	r19, r1
 318:	2f 73       	andi	r18, 0x3F	; 63
 31a:	33 27       	eor	r19, r19
 31c:	23 2b       	or	r18, r19
 31e:	61 f0       	breq	.+24     	; 0x338 <serial_writechar+0x54>
 320:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <txhead>
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	ee 50       	subi	r30, 0x0E	; 14
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 83       	st	Z, r24
 32c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <txhead>
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	8f 73       	andi	r24, 0x3F	; 63
 334:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <txhead>
 338:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 342:	08 95       	ret

00000344 <serial_writestr>:
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	c8 2f       	mov	r28, r24
 34c:	d9 2f       	mov	r29, r25
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	11 e0       	ldi	r17, 0x01	; 1
 352:	19 0f       	add	r17, r25
 354:	ec 2f       	mov	r30, r28
 356:	fd 2f       	mov	r31, r29
 358:	e9 0f       	add	r30, r25
 35a:	f1 1d       	adc	r31, r1
 35c:	80 81       	ld	r24, Z
 35e:	88 23       	and	r24, r24
 360:	19 f0       	breq	.+6      	; 0x368 <serial_writestr+0x24>
 362:	c0 df       	rcall	.-128    	; 0x2e4 <serial_writechar>
 364:	91 2f       	mov	r25, r17
 366:	f4 cf       	rjmp	.-24     	; 0x350 <serial_writestr+0xc>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <serial_writestr_P>:
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	c8 2f       	mov	r28, r24
 378:	d9 2f       	mov	r29, r25
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	11 e0       	ldi	r17, 0x01	; 1
 37e:	19 0f       	add	r17, r25
 380:	ec 2f       	mov	r30, r28
 382:	fd 2f       	mov	r31, r29
 384:	e9 0f       	add	r30, r25
 386:	f1 1d       	adc	r31, r1
 388:	c8 95       	lpm
 38a:	80 2d       	mov	r24, r0
 38c:	88 23       	and	r24, r24
 38e:	19 f0       	breq	.+6      	; 0x396 <serial_writestr_P+0x26>
 390:	a9 df       	rcall	.-174    	; 0x2e4 <serial_writechar>
 392:	91 2f       	mov	r25, r17
 394:	f3 cf       	rjmp	.-26     	; 0x37c <serial_writestr_P+0xc>
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
