
bin/Debug/homework2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000008a0  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001282  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
delayTime: the value of the requested time

**********************************/

void delay(unsigned int delayTime)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	9c 83       	std	Y+4, r25	; 0x04
  8e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int ii = 0;
  90:	1a 82       	std	Y+2, r1	; 0x02
  92:	19 82       	std	Y+1, r1	; 0x01

    while(ii < delayTime)
  94:	05 c0       	rjmp	.+10     	; 0xa0 <delay+0x20>
    {
        ii++;
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned int delayTime)
{
    unsigned int ii = 0;

    while(ii < delayTime)
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	3a 81       	ldd	r19, Y+2	; 0x02
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	9c 81       	ldd	r25, Y+4	; 0x04
  a8:	28 17       	cp	r18, r24
  aa:	39 07       	cpc	r19, r25
  ac:	a0 f3       	brcs	.-24     	; 0x96 <delay+0x16>
    {
        ii++;
    }
}
  ae:	00 00       	nop
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <main>:



int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <main+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
    unsigned int delayValue = 60000;
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	9a ee       	ldi	r25, 0xEA	; 234
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	89 83       	std	Y+1, r24	; 0x01
    //Sets PINB 1 and goes to
    DDRB |= (1<<1);
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	24 e2       	ldi	r18, 0x24	; 36
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	22 60       	ori	r18, 0x02	; 2
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
    while(1) {

        PORTB |= (1<<1);
  e2:	85 e2       	ldi	r24, 0x25	; 37
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	25 e2       	ldi	r18, 0x25	; 37
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	22 60       	ori	r18, 0x02	; 2
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
        delay(delayValue);
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	0e 94 40 00 	call	0x80	; 0x80 <delay>


        PORTB &= ~(1<<1);
  fc:	85 e2       	ldi	r24, 0x25	; 37
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	25 e2       	ldi	r18, 0x25	; 37
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	2d 7f       	andi	r18, 0xFD	; 253
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18


        delay(delayValue);
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	0e 94 40 00 	call	0x80	; 0x80 <delay>


    }
 116:	e5 cf       	rjmp	.-54     	; 0xe2 <main+0x24>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
